#include <iostream>
#include <Windows.h>

int main(int argc, char* argv[])
{
    // Check if the process ID is provided as an argument
    if (argc < 2) {
        std::cout << "Usage: " << argv[0] << " <process_id>" << std::endl;
        return 1;
    }

    // Open the process
    DWORD processId = std::stoi(argv[1]);
    HANDLE process = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processId);
    if (process == nullptr) {
        std::cout << "Failed to open the process" << std::endl;
        return 1;
    }

    // Create a memory dump file
    char dumpName[MAX_PATH] = { 0 };
    sprintf_s(dumpName, "memory_dump_%d.dmp", processId);
    HANDLE dumpFile = CreateFileA(dumpName, GENERIC_WRITE, 0, nullptr, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, nullptr);
    if (dumpFile == INVALID_HANDLE_VALUE) {
        std::cout << "Failed to create the dump file" << std::endl;
        return 1;
    }

    // Write the memory dump to the file
    BOOL result = MiniDumpWriteDump(process, processId, dumpFile, MiniDumpWithDataSegs, nullptr, nullptr, nullptr);
    if (!result) {
        std::cout << "Failed to write the dump" << std::endl;
        return 1;
    }

    std::cout << "Memory dump created: " << dumpName << std::endl;

    // Close the process and the dump file handles
    CloseHandle(process);
    CloseHandle(dumpFile);

    return 0;
}
